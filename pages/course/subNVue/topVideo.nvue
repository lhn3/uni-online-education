<template>
	<view>
		<view class="status" :style="{height:statusHeight +'px'}"></view>
		<video ref="videoRef" class="video" 
		:src="videoMidea.videoUrl" 
		:controls="false"
		:poster="mainImage"
		:show-fullscreen-btn="false"
		:show-center-play-btn="false"
		:show-progress="false"	
		@ended="nextVideo"
		@timeupdate="timeupdate"
		@click="clikcVideo"
		>
			<!-- 覆盖组件 -->
			<cover-view class="cover-top row" v-if="showControls">
				<!-- 后退 -->
				<text class="btn icon" @click.stop="back">&#xe679;</text>
				<text class="title">{{videoMidea.name}}</text>
			</cover-view>
			
			<cover-view class="cover-center center" v-if="first">
				<!-- 开始 -->
				<text class="icon iconBig" @click="playFirst">&#xe625;</text> 
			</cover-view>
			
			<cover-view class="cover-bottom row center" :style="{width:len+'px'}" v-if="showControls">
				<view class="row">
				<!-- 暂停或开始 -->
					<text class="btn icon" v-if="!isPlay" @click="playOrpause">&#xe625;</text>
					<text class="btn icon" v-else @click="playOrpause">&#xe62c;</text>
				<!-- 下一个 -->
					<text class="btn icon" @click="nextVideo">&#xe61b;</text>
				</view>
				<text class="time">{{filterCurrent}}</text>
				<view class="bottom-slider">
					<slider-bar :current="currentTime" :direction="fullScreen?'screenY':'screenX'" 
					:duration="duration" @change="sliderChange" :sliderWidth="sliderLen" :rate="parseFloat(rate)"></slider-bar>
				</view>	
				<text class="time">{{filterDuration}}</text>
				<view class="row">
					<!-- 倍数 -->
					<text class="btn x" @click="clickRate">x{{rate}}</text>
					<!-- 全屏 -->
					<text class="btn icon" v-if="fullScreen" @click="changeDirection">&#xe61e;</text>
					<text class="btn icon" v-else @click="changeDirection">&#xe623;</text>
				</view>
			</cover-view>
			
			<!-- 倍数 -->
			<cover-view :class="{'rate-list':!fullScreen,'rate-list-full':fullScreen}" v-if="showRate">
				<text :class="{'active':item == rate,'rate-item':!fullScreen,'rate-item-full':fullScreen}" 
				v-for="item in rates" @click="changeRate(item)" :key="item">{{item}}</text>
			</cover-view>
		</video>
	</view>
</template>

<script>
import sliderBar from './cpns/slider-bar.nvue'
export default {
	components:{
		"slider-bar":sliderBar
	},
	data(){
		return{
			statusHeight:0,
			videoContext:null,
			first:true,			//中间播放按钮
			isPlay:false,		//播放暂停
			showControls:true,	//控件显示隐藏
			timmer:null,		//计时器
			duration:360,		//视频总时长
			currentTime:0,		//播放的当前时长
			fullScreen:false,	//是否全屏
			len:0,				//底部控件长度
			unFullScreenLen:0,	//非全屏时长度
			fullScreenLen:0,	//全屏时长度
			sliderLen:0,		//进度条长度
			rate:'1.0',			//当前倍数
			showRate:false,		//是否展示倍数
			courseSection:[],	//视频列表
			sectionRef:null,	//视频列表的实例
			activeVideo:{},		//正在播放的视频索引
			mainImage:"",		//主图
			videoMidea:{
				id:null,
				name:'',
				videoUrl:''
			},
			rates:['0.5','0.8','1.0','1.25','1.5','2.0']
		}
	},
	onLoad() {
		let res = uni.getSystemInfoSync()
		// 获取状态栏高度
		this.statusHeight = res.statusBarHeight
		// 获取屏幕宽高设置控件长度
		this.unFullScreenLen = res.screenWidth
		this.fullScreenLen = res.screenHeight
		this.len = this.unFullScreenLen
		this.sliderLen = this.len - uni.upx2px(470)
		
		//监听视频信息传递事件
		uni.$on('videoInfo',(res)=>{
			this.activeVideo = res.activeVideo
			if(res.type == 'init') {
				this.mainImage = res.courseDetail.mainImage
				this.courseSection = res.courseSection
				this.sectionRef = res.sectionRef
				this.videoMidea = {...this.courseSection[0].sectionList[0]}
				uni.request({
					url:this.courseSection[0].sectionList[0].videoUrl,
					method:'GET',
					success:(res)=> {
						this.videoMidea.videoUrl = res.data.data.url	//设置播放url
					}
				})
			}else{
				this.videoMidea = {...res.section}
				uni.request({
					url:res.section.videoUrl,
					method:'GET',
					success:(res)=> {
						this.videoMidea.videoUrl = res.data.data.url	//设置播放url
						this.playVideo()
					}
				})
			}
		})
	},
	//nvue文件使用字体图标
	beforeCreate() {
		const domModule = uni.requireNativePlugin('dom')
		domModule.addRule('fontFace', {
			'fontFamily': "iconfont",
			'src': "url('~@/static/icon/iconfont.ttf')"
		});
	},
	mounted() {
		this.videoContext = this.$refs.videoRef
	},
	methods:{
		playVideo(){
			this.videoContext.pause()
			setTimeout(()=>{
				this.first = false
				this.isPlay = true
				this.videoContext.play()
			},300)
		},
		//视频播放到末尾播放下一个
		nextVideo(){
			let courseSection = this.courseSection
			//要浅拷贝，否则下面使用activeVideo，又在改变activeVideo，会产生递归
			let activeVideo = {...this.activeVideo}	
			courseSection.forEach((item1,index1)=>{
				if(index1 == activeVideo.parentIndex){
					item1.sectionList.forEach((item2,index2)=>{
						if(index2 == activeVideo.childIndex){			//找到正在播放的
							if(item1.sectionList.length > activeVideo.childIndex+1){//如果此章节此视频后还有视频
								this.videoMidea={...item1.sectionList[index2+1]}			//就播放此章节下一个视频
								uni.request({
									url:item1.sectionList[index2+1].videoUrl,
									method:'GET',
									success:(res)=> {
										this.videoMidea.videoUrl = res.data.data.url	//设置播放url
										this.activeVideo.childIndex += 1
										this.sectionRef.actSect=this.videoMidea.name
										this.playVideo()
									}
								})
							}else{										//否则就寻找下一章
								if(courseSection.length > activeVideo.parentIndex+1){//判断此课程是否还有下一章
									this.videoMidea={...courseSection[index1+1].sectionList[0]}//有下一章就播放下一章的第一个视频
									uni.request({
										url:courseSection[index1+1].sectionList[0].videoUrl,
										method:'GET',
										success:(res)=> {
											this.videoMidea.videoUrl = res.data.data.url	//设置播放url
											this.activeVideo.parentIndex += 1
											this.activeVideo.childIndex = 0
											this.sectionRef.actSect=this.videoMidea.name
											this.playVideo()
										}
									})
								}else{									//没有下一章播放第一个视频
									this.videoMidea={...courseSection[0].sectionList[0]}
									uni.request({
										url:courseSection[0].sectionList[0].videoUrl,
										method:'GET',
										success:(res)=> {
											this.videoMidea.videoUrl = res.data.data.url	//设置播放url
											this.activeVideo.parentIndex = 0
											this.activeVideo.childIndex = 0
											this.sectionRef.actSect=this.videoMidea.name
											this.playVideo()
										}
									})
								}						
							}
						}
					})
				}
			})
		},
		// 获取播放进度变化，视频总时长duration，播放当前时长等
		timeupdate(event){
			this.duration = event.detail.duration
			this.currentTime = event.detail.currentTime
		},
		//定时隐藏控件
		useTimer(){
			if(this.timmer) clearTimeout(this.timmer);
			this.timmer=setTimeout(()=>{
				this.showControls = false
				this.showRate=false
				this.timmer = null
			},5000)
		},
		//点击视频组件
		clikcVideo(){
			this.showControls = !this.showControls
			if(this.showControls) this.useTimer();	//显示控件，定时隐藏控件
			this.showRate=false
		},
		// 第一次播放视频
		playFirst(){
			this.first = false
			this.isPlay = true
			this.videoContext.play()
			this.useTimer()
		},
		//播放或暂停
		playOrpause(){
			if(this.isPlay){
				this.videoContext.pause()
			}else{
				this.videoContext.play()
			}
			this.isPlay = !this.isPlay
			this.useTimer()					//无论暂停播放，控件都定时隐藏
			if(!this.first) return;
			this.first = false
		},
		// 是否全屏
		changeDirection(){
			if(this.fullScreen){
				this.videoContext.exitFullScreen()
			}else{
				this.videoContext.requestFullScreen()
			}
			this.fullScreen=!this.fullScreen
		},
		//后退,如果是全屏就退出全屏，不是则后退
		back(){
			if(this.fullScreen){
				this.changeDirection()
			}else{
				uni.navigateBack()
			}
		},
		// 滑动进度条结束时触发
		sliderChange(currentTime){
			this.showRate=false
			this.videoContext.seek(currentTime)
			this.currentTime = currentTime
		},
		// 是否显示倍数选择
		clickRate(){
			this.showRate=!this.showRate
		},
		//改变倍数
		changeRate(rate){
			this.rate=rate
			this.videoContext.playbackRate(parseFloat(rate))
			this.showRate=false
		},
		// 时间过滤
		leftZero(num){
		    if(0<=num && num<10){
		        return '0'+num
		    }else{
		        return num
		    }
		},
		formatTime(time){
		    let second=Math.ceil(parseInt(time))
		    if(second>=3600){
		        return this.leftZero(Math.floor(second/3600)) +':'+
		        this.leftZero(Math.floor((second%3600)/60))+':'+
		        this.leftZero((second%3600)%60)
		    }else if(second>=60){
		        return this.leftZero(Math.floor(second/60))+':'+this.leftZero(second%60)
		    }else{
		        return '00'+':'+this.leftZero(second%60)
		    } 
		}
	},
	computed:{
		filterDuration(){
			return this.formatTime(this.duration)
		},
		filterCurrent(){
			return this.formatTime(this.currentTime)
		}
	},
	// 监听全屏改变底部控制栏长度和滑动条长度
	watch:{
		fullScreen(newValue){
			if(newValue){
				this.len=this.fullScreenLen
			}else{
				this.len=this.unFullScreenLen
			}
			this.sliderLen = this.len - uni.upx2px(470)
		}
	},
	// 写在页面删除监听
	onUnload() {
		uni.$off('videoInfo')
	}
}
</script>

<style>
.status{
	width: 750rpx;
	background-color: #000000;
}
.video{
	width: 750rpx;
	height: 225px;
}
.icon{
	font-family:iconfont;
	font-size:50rpx;
	color: #fff;
}
.iconBig{
	font-size:60rpx;
	width: 100rpx;
	height: 100rpx;
	text-align: center;
	line-height: 100rpx;
	border-radius: 50rpx;
	background-color: rgba(0,0,0,0.5);
}
.cover-top{
	height: 90rpx;
	padding: 10rpx;
	align-items: center;
	/* 渐变 */
	background-image: linear-gradient(to top,rgba(0,0,0,0),rgba(0,0,0,0.8));
}
.title{
	color: #fff;
	font-size: 30rpx;
	width: 500rpx;
	/* 一行显示 */
	lines: 1;
	text-overflow: ellipsis;
}
.cover-center{
	position: absolute;
	top: 90rpx;
	left: 0;
	right: 0;
	bottom: 90rpx;
	background-color: rgba(0,0,0,0);
}
/* 底部区域 */
.cover-bottom{
	position: absolute;
	bottom: 0;
	height: 90rpx;
	width: 750rpx;
	background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.8));;
}
.btn {
	width: 60rpx;
	line-height: 90rpx;
	text-align: center;
	color: #FFFFFF;
	font-size: 40rpx;
}
.x{
	width: 70rpx;
	font-size: 28rpx;
}
.time {
	font-size: 24rpx;
	color: #FFFFFF;
	width: 110rpx;
	text-align: center;
}
.bottom-slider {
	flex-direction: row;
	align-items: center;
	height: 90rpx;
	/* 减去固定的宽度，就是此进度条宽度 */
	flex: 1; 
	text-align: center;
}


/* 非全屏倍速样式 */
.rate-list{
	position: absolute;
	bottom: 70rpx;
	right: 45rpx;
	background-color: rgba(0,0,0, 0.7);
	width: 80rpx;
	border-radius: 10rpx;
}
.rate-item{
	color: #FFFFFF;
	font-size: 28rpx;
	line-height: 40rpx;
	text-align: center;
}
.active {
	color: #A2CD5A;
}

/* 全屏倍速样式 */
.rate-list-full {
	width: 400rpx;
	background-color: rgba(0,0,0, 0.7);
	position: absolute;
	right: 0;
	top: 0;
	bottom: 0;
}
.rate-item-full {
	color: #FFFFFF;
	font-size: 50rpx;
	line-height: 130rpx;
	text-align: center;
}
</style>
